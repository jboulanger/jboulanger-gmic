#@gmic
#
#  File        : jboulanger.gmic
#                ( G'MIC commands file )
#
#  Description : Define a set of gmic commands (mostly useful for bioimage analysis)
#
#  Copyright   : Jerome Boulanger
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#


#---------------------------------
#
#@gmic :: Input/Output
#
#---------------------------------

#@gmic tiff3d
#@gmic : Input a 3D tif as a 3D image
#@gmic : Note: This is useful for loading several 3D image stack
tiff3d : -e[^-1] "Load the file $1 as a 3D image"
-v - n=@#
-i $1 -a[{$n}--1] z
-v +

#@gmic toff3d
#@gmic : Output a 3D tif as a 3D image
toff3d : -e[^-1] "Save the 3D image as a tiff file"
-v -
-repeat @#
-o[$>] @{"-filename \"$1\","$>}
-done
-v +

#---------------------------------
#
#@gmic :: 3D Rendering
#
#---------------------------------

#@gmic boundingbox3d
#@gmic : Bounding box of a 3D volume
#@gmic : $ 100,100,100 -boundingbox3d
boundingbox3d : -skip ${1=10}
-e[^-1] "Bounding box"
-repeat @# -l[$>]
-box3d @{0,w},@{0,h},@{0,d} -primitives3d[-1] 1  -opacity3d[-1] .25
-plane3d @{0,w},@{0,h},$1,{round(@{0,h}/@{0,w}*$1)} -primitives3d[-1] 1 -opacity3d[-1] .1
-rm[0]
-+3d
-endl -done

#@gmic rendervolume
#@gmic : Pseudo volumic rendering
#@gmic : $ 100,100,100 -noise 1 -blur 10,0 -max 0 -resize 100%,100%,100%,3,0 -n 0,100 -f 'if(c==0,z*i(x,y,z,0),if(c==1,i(x,y,z,0)*(100-z),0))' -rendervolume
rendervolume: -skip ${1=8},${2=5},${3=.1}
-e[^-1] "Pseudo volumic rendering of image with size $1 quality $2 and opactiy $3"
-v - -repeat @# -l[$>]
-mirror x -n 1,256 --tones $2 -r[1--1] 100%,100%,100%,3,1 -*[1--1] [0] -rm[0,1]
-repeat @# -if {@{$<,iM}>0} -pointcloud3d[$<]  -gaussians3d[$<] $1,{$3*($<+1)/$2} -else -rm[$<] -endif -done
-+3d -md3d -1 -+3d 0,0,{0.5*$1}
-endl -done -v +

#@gmic displayvolume
#@gmic : Display the volume with black background, a bounding box and a volumic rendering of the data
#@gmic : $ 100,100,100 -noise 1 -blur 10,0 -max 0 -resize 100%,100%,100%,3,0 -n 0,100 -f 'if(c==0,z*i(x,y,z,0),if(c==1,i(x,y,z,0)*(100-z),0))' -displayvolume 8,5,.1
displayvolume: -skip ${1=8},${2=5},${3=.1}
-e[^-1] "display_volume with size $1 quality $2 and opactiy $3"
-v -
--boundingbox3d 20
-rendervolume[0] $1,$2,$3
-+3d
-background3d 0,0,0
-v +

#@gmic colordepth
#@gmic : Color depth coding
#@gmic : $ 100,100,100 -noise 1 -blur 10,0 -max 0 -colordepth 5
colordepth: -skip ${1=5}
-e "colordepth coding with lut $1"
-v - -repeat @# -l[$>]
-_colordepth_volume $1 -s z -+
-endl -done -v +

_colordepth_volume: -skip ${1=5}
-v - -repeat @# -l[$>]
-i [0] -f[-1] 'z/(d-1)*255' -map[-1] $1 -resize[0] 100%,100%,100%,3,5 -*
-endl -done -v +

colordepth_scale: -skip ${1=5}
10,@{0,h-10} -f[-1] '(h-y)/(h-1)*255' -map[-1] $1 -frame[-1] 5,5,0,0,0

#---------------------------------
#
#@gmic :: Feature detections
#
#---------------------------------

#@gmic detect_events : _scale_xy,_scale_t,_threshold
#@gmic : Detect space time events using space time interest points
#@gmic : $ 100,100,100 -noise 1 -blur 2 -detectevents
detectevents : -skip ${1=1},${2=1},${3=9}
-e[^-1] "detect events with scale_xy $1 scale_z $2 and threshold $3"
-v -
-repeat @# -l[$>]
-blur_xy $1 -blur_z $2 -structuretensors -blur_xy $1 -blur_z $2
-s z -repeat @# -l[$>] -eigen -k[0] -s c -k[2] -endl -done -a z
thres={@{0,ia}+$3*sqrt(@{0,iv})}
--max_patch[0] 8 -threshold[0] $thres -*
-endl -done -v +

#@gmic pointscoordinates
#@gmic : Return the list of points in the image as 3*N columns vector
#@gmic : $ 100,100 -noise .1,2 --pointscoordinates
pointscoordinates :
-e[^-1] "return the list of points in the image"
-v - -repeat @# -l[$>]
-pointcloud3d -s3d -k[2] -split y,{h/3} -a x
-endl -done -v +

#@gmic circles : _size,_opacity,_color
#@gmic : plot circles on image [0] at coordinates given by image [1]
#@gmic : $ 256,256 -noise .1,2 --pointscoordinates --circles 5 -rm[-1]
#@gmic : $ image.jpg --l[0] -blur 3 -structuretensors -blur 3 -eigen -k[0] -channels 1 --gt {9*@{-mad}} --max_patch[0] 8 -* -pointscoordinates -endl -circles 5 -rm[-1]
circles : -skip ${1=10},${2=1},${3=255}
-e[^-1] "draw @{1,w} circles on image [0]"
-v -
-repeat {@{1,w}}
  -if {@{0,d}>1}
    x={@{1,i($>,0)}} y={@{1,i($>,1)}} z={@{1,i($>,2)}}
    -repeat @{0,s} -sh[0] $z,$z,$> -ellipse[-1] $x,$y,$1,$1,0,$2,0xFFFFFF,$3 -rm[-1] -done
   -else
    x=@{1,i($>,0)} y=@{1,i($>,1)}
    -ellipse[0] $x,$y,$1,$1,0,$2,0xFFFFFF,$3
  -endif
-done

#@gmic addtext : _size
#@gmic : Add labels on image [0] at coordinates given by image [1]
#@gmic : $ 256,256 -noise .1,2 --pointscoordinates -addtext 5 -rm[-1]
addtext : -skip ${1=21},${2=128}
-e[^-1] "add text labels from @{1,w} points"
-v -
-repeat {@{1,w}}
  -if {@{0,d}>1}
    x={@{1,i($>,0)}} y={@{1,i($>,1)}} z={@{1,i($>,2)}} id={$>+1}
    -repeat @{0,s} -sh[0] $z,$z,$> -text[-1] $id,$x,$y,21,.5,$2,$2,$2 -rm[-1] -done
  -else
    x=@{1,i($>,0)} y=@{1,i($>,1)} id={$>+1}
    -text[0] $id,$x,$y,21,.5,$2,$2,$2
  -endif
-done

#@gmic croparound : _size
#@gmic : Crop image [0] around coordinates given by image [1]
#@gmic : $ image.jpg 100%,100% -f[-1] 0 -noise[-1] .1,2 --pointscoordinates[-1] --croparound[0,-1] 5 -append_tiles[3--1] ,  -rm[-2] -dilate[1] 5 -*[1] 128 -blend[0,1] add
croparound :  -skip ${1=10},${2=10}
-e[^-1] "crop image [0] around "@{1,w}" coordinates given by image [1]"
-v -
-repeat {@{1,w}}
  -if {@{0,d}>1}
    x=@{1,i($>,0)} y=@{1,i($>,1)} z=@{1,i($>,2)}
    --crop[0] {$x-$1},{$y-$1},{$z-$2},{$x+$1},{$y+$1},{$z+$2}
  -else
    x=@{1,i($>,0)} y=@{1,i($>,1)}
    --crop[0] {$x-$1},{$y-$1},{$x+$1},{$y+$1}
  -endif
-done -rm[0,1] -v +

#---------------------------------
#
#@gmic :: Filtering and deconvolution
#
#---------------------------------

#@gmic movavg : _size>=1
#@gmic : moving average of image list with a box filter of size _size
#@gmic : $ 11 -f 'x>w/2' --l[-1] -s x -movavg 9 -a x -endl  --blur[0] 1.2 -a c -display_graph
movavg : -check "$1>=1"
-e[^-1] "moving average with size "$1 -v -
n={$1-1}
-repeat $n
  -repeat {{@#}-1} --+[{$>},{$>+1}] -*[-1] .5 -rm[$>] -mv[-1] $> -done
  -reverse
-done
-if {$n%2!=0} -reverse -endif
-v +

#@gmic deblur_richardsonlucy : _sigma>0, _nb_iter>0
#@gmic : Deblur an image using Richardson-Lucy algorithm.
#@gmic : Default values  '_nb_iter=10'
#@gmic : $ image.jpg --blur 1 --deblur_richardsonlucy[-1] 1
deblur_richardsonlucy : -check "$1>=0 && ${2=10}>=0"
-e[^-1] "Deblur an image using Richardson-Lucy algorithm with sigma $1 and $2 iterations."
-v - -repeat @# -l[$>]
  [0]
  -repeat $2
    --blur[-1] $1 --/[0,-1] -rm[-2] -blur[-1] $1 -*[-1,-2] # u *= H ( f / Hu )
  -done
  -rm[0]
-endl -done -v +

#@gmic deblur_goldmeinel : _sigma>0, _nb_iter>0, _acceleration
#@gmic : Deblur an image using Gold Meinel algorithm
#@gmic : Default values '_nb_iter=8, _acceleration=1'
#@gmic : $ image.jpg --blur 1 --deblur_goldmeinel[-1] 1
deblur_goldmeinel : -check "$1>=0 && ${2=8}>0 && ${3=1}"
-e[^-1] "Deblur an image using Gold-Meinel algorithm with sigma $1 and $2 iterations and acceleration $3."
-v - -repeat @# -l[$>]
  [0]
  -repeat $2
    --blur[-1] $1 --/[0,-1] -rm[-2] -pow[-1] $3 -*[-1,-2] # u *= f / Hu
  -done
  -rm[0]
-endl -done -v +

#@gmic spotify : _scale>0,_nb_iter>0,
#@gmic : Make everything look like a spot
#@gmic : Default values '_nb_iter=1, _scale=1'
#@gmic : $ image.jpg --spotify 1,10
#@gmic : $ image.jpg --spotify 1,20 -norm[-1] -gt[-1] 5% -blur 1 -*
spotify : -check "${1=1}>0 && ${2=1}>0"
-e[^-1] "Spotify with scale $1 with $2 iterations"
-v - -repeat @# -l[$>]
s=@{0,a} -repeat $2 -blur $1 --blur {2*$1} -- -cut 0,100% -f 'i*{$s}/ia' -done
-endl -done -v +

#@gmic tubeness : _scale>0,_nb_iter>0,_strength
#@gmic : Tubeness filter based on the eigen value of the Hessian
#@gmic : Default values '_nb_iter=1, _scale=1, _strength=1'
#@gmic : $ image.jpg --tubeness 3 -n 0,255
tubeness : -check "${1=1}>0 && ${2=1}>0 && ${3=1}>=0"
-e[^-1] "Tubeness with scale $1 with $2 iterations and strength $3"
-v - -repeat @# -l[$>]
  -repeat $1
   [0]
   -l[-1]
     -blur $2
     -s c -repeat @# -l[$>]
       -hessian -a c -eigen -k[0] -s c -k[1] -* -1 -cut 0,100%
     -endl -done -a c
   -endl
   -*[-1] $3 -+
   -done
-endl -done -v +

#@gmic schizo : _amplitude,_amplitude_normal,_nb_iterations,_strength
#@gmic : Schizo filter gives either a furry image or a smoothed image
#@gmic : Default values '_amplitude=100,amplitude_normal=-50 _nb_iter=5,_strength=.75'
#@gmic : $ image.jpg --schizo 100,-50 --schizo[0] -50,100 -max 0
schizo : -skip ${1=100},${2=-50},${3=5},${4=.75}
-e[^-1] "Schizo filter smoothing with // $1 and T $2 and $3 iterations."
-v - -repeat @# -l[$>]
[0]
-repeat $3
 -l[-1]
   --iee -*[-1] {$1/(0.0001+max(abs(@{-1,m}),abs(@{-1,M})))}
   --inn[0] -*[-1] {$2/(0.0001+max(abs(@{-1,m}),abs(@{-1,M})))}
   -+
 -endl
 -*[-1] $4  --*[0] {1-$4} -+[-1,-2]
-done -rm[0]
-endl -done -v +

#@gmic warp_affine
#@gmic : Warp the image [0] using an affine field defined by a 3x3 matrix [1]
#@gmic : $ image.jpg 3 -f[-1] 1 -diagonal[-1] -noise[-1] .1  --warp_affine -k[0,-1]
warp_affine :
--l[0,1]
 params=(@{1,i(0,0)},@{1,i(1,0)},@{1,i(2,0)};\
         @{1,i(0,1)},@{1,i(1,1)},@{1,i(2,1)};\
         @{1,i(0,2)},@{1,i(1,2)},@{1,i(2,2)})
 @{0,w},@{0,h},1,1,1 --f[-1] x --f[-1] y -a[-3--1] c
 -mix_channels[-1] $params
 -channels[-1] 1,2
 -warp[0] [-1],0,1,0 -rm[-1,-2]
-endl
-rm[0,1]

#@gmic midway
#@gmic : Midway equalization of two channels
#@gmic : $ image.jpg -channels 0,1 -s c -*[-1] 2 -a c --midway
midway:
-repeat @# -l[$>]
--l[0]
  -resize 20%,20%
  -s c -unroll y -l[0] 1,@{0,h},1,1,1 -a x -endl  -transpose[0]
  -l[0] -svd -f[-2] 'if(i>1e-6,1/i,0)' -diagonal[-2] -transpose[-1] -mmul -endl -mmul
  a=@{0,0} b=@{0,1} -rm[-1]
-endl
-s c
-+[-1] {$b} -*[-1] {1/$a} -a c
-endl -done

#@gmic contour2d: _tolerance
#@gmic : Draw a 2D contour of regions with tolerance _tolerance
#@gmic : $ image.jpg -norm -blur 1 -gt 50% --contour2d
contour2d: -skip ${1=.1}
-v - -repeat @# -l[$>]
-f 'if(abs(i(x,y)-i(x+1,y+1))>$1||abs(i(x,y)-i(x+1,y))>$1,1,0)'
-endl -done -v +

#@gmic vobs : _scale
#@gmic : Motion quantity (Normal motion)  h * (||Ixy|| It) / h * Ixy
#@gmic : $ 100,100,10 -noise 1 -blur 1 --vobs
vobs : -check "${1=1}>0"
-e[^-1] "Motion quantity with scale $1"
-v - -repeat @# -l[$>]
-gradient -a[0,1] c -norm[0] -abs[1] --* -rm[1] -blur $1 -reverse -/
-endl -done -v +

#@gmic denoise_patch_dict :  _patch_size,_number_of_shifts,_threshold,_number_of_pc
#@gmic : Denoising using a dictionnary of patches learn on the image
#@gmic : work in progress...
#@gmic : $ image.jpg --noise 20 --denoise_patch_dict[1] 16,8,2,50%
denoise_patch_dict: -skip ${1=8},${2=8},${3=2},${4=100%}
-e[^-1] "Denoising using a dictionnary of "$1"x"$1" patches with "$2" shifts, threshold "$3" and "$4" of principal components."
-v - -repeat @# -l[$>]
  oW=@{0,w} oH=@{0,h} oS=@{0,s} -resize_pow2 0
  Ntile={round(@{0,w}/$1)}
  --l[-1] # compute a dictionnary
    -split_tiles $Ntile pW=@{1,w} pH=@{1,h} # split the image
    -repeat @# -if {@{$<,iM}==0} -rm[$<] -endif -done #remove back tiles
    -unroll y -a x -- 'ia' --transpose[-1] -**[-2,-1] -eigen -k[-1] -columns 0,$4 # PCA
  -endl
  -repeat $2
    -if {$2>1} dx={round(?(0,$1))} dy={round(?(0,$1))} -else dx=0 dy=0 -endif
    --shift[0] $dx,$dy,0,0,2
    -l[1,-1]
      -l[1] -split_tiles $Ntile -unroll y -a x -endl
      -transpose[0] --**                # project on the dictionnary
      t=@{-mad[-1]}                     # estimate variance of coefficients
      -f[-1] 'if(abs(i)<$3*$t,0,i)'     # threshold the coefficients
      -rm[1] -transpose[0] --** -rm[-2] # project back
    -endl
    -l[-1]
       -s x -resize $pW,$pH,1,$oS,-1
       -append_tiles $Ntile
       -shift {-$dx},{-$dy},0,0,2
     -endl
  -done
  -rm[0,1]
  -+ -/ $2
  -crop 0,0,{$oW-1},{$oH-1}
-endl -done -v +

#---------------------------------
#
#@gmic :: Gimp
#
#---------------------------------
#@gimp _<b>Testing</b>

#@gimp J&#233;j&#233;

#@gimp Sharpen [Richardson-Lucy] : jeje_deblur_richardsonlucy, jeje_deblur_richardsonlucy_preview
#@gimp : Sigma = float(1,0.5,10)
#@gimp : Iterations = int(10,1,100)
#@gimp : Cut = bool(true)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
jeje_deblur_richardsonlucy:
  -deblur_richardsonlucy $*
  -if $3 -c 0,255 -else -n 0,255 -endif

jeje_deblur_richardsonlucy_preview:
  -gimp_split_preview "-jeje_deblur_richardsonlucy $*",$-1

#@gimp Sharpen [Gold-Meinel] : jeje_deblur_goldmeinel, jeje_deblur_goldmeinel_preview
#@gimp : Sigma = float(1,0.5,10)
#@gimp : Iterations = int(5,1,15)
#@gimp : Acceleration = float(1,1,3)
#@gimp : Cut = bool(true)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
jeje_deblur_goldmeinel:
  -deblur_goldmeinel $*
  -if $4 -c 0,255 -else -n 0,255 -endif

jeje_deblur_goldmeinel_preview:
  -gimp_split_preview "-jeje_deblur_goldmeinel $*",$-1

#@gimp Denoise [Patch PCA]: jeje_denoise_patch_dict, jeje_denoise_patch_dict_preview
#@gimp : Patch = choice(0,4,8,16,32)
#@gimp : Cycles = int(1,0.1,6)
#@gimp : Threshold = float(1,0.1,6)
#@gimp : Components (%) = int(75,1,100)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
jeje_denoise_patch_dict:
  -denoise_patch_dict {2^($1+2)},$2,$3,$4%
  -c 0,255

jeje_denoise_patch_dict_preview:
  -gimp_split_preview "-jeje_denoise_patch_dict $*",$-1


# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)
